package view;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.util.Properties;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import controller.SettingInitializer;
import domain.Settings;

class PreferenceForm extends JFrame {
    private JPanel panel1;
    private JCheckBox controlCounterCheckbox;
    private JCheckBox control2ndHallChooserCheckbox;
    private JLabel preferenceDetailsLabel;
    private JLabel currentSettingsLabel;

    PreferenceForm(JFrame frame, Properties UITexts) {
        setTitle(UITexts.getProperty("preferences.frame.title"));
        preferenceDetailsLabel.setText
                (UITexts.getProperty("preferences.details.label"));
        preferenceDetailsLabel.setFont(new Font("", Font.PLAIN, 15));
        currentSettingsLabel.setText
                (UITexts.getProperty("current.settings.label"));
        controlCounterCheckbox.setText
                (UITexts.getProperty("count.preference.checkbox.label"));
        controlCounterCheckbox.setFont(new Font("", Font.PLAIN, 14));
        control2ndHallChooserCheckbox.setText
                (UITexts.getProperty("hall2.preference.check.box.label"));
        control2ndHallChooserCheckbox.setFont(new Font("", Font.PLAIN, 14));

        boolean countAllAppearances = SettingInitializer.KEY_COUNT_FROM_ALL;
        boolean choose2ndHallFrom1stRound = SettingInitializer.KEY_CHOOSE_FROM_1ST_ROUND;

        controlCounterCheckbox.setSelected(countAllAppearances);
        control2ndHallChooserCheckbox.setSelected(choose2ndHallFrom1stRound);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                frame.setEnabled(false);

                SettingInitializer.SETTINGS.setCountFromAllRoles(controlCounterCheckbox.isSelected());
                SettingInitializer.SETTINGS.setChooseHall2MemberFrom1stRound(control2ndHallChooserCheckbox.isSelected());

                try {
                    Settings.settingsDao.update(SettingInitializer.SETTINGS);
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
        });

        setContentPane(panel1);
        setAlwaysOnTop(true);
        pack();
        setResizable(false);
        setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 5, new Insets(0, 0, 0, 0), -1, -1));
        control2ndHallChooserCheckbox = new JCheckBox();
        control2ndHallChooserCheckbox.setEnabled(true);
        control2ndHallChooserCheckbox.setSelected(false);
        control2ndHallChooserCheckbox.setText("");
        panel1.add(control2ndHallChooserCheckbox, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        controlCounterCheckbox = new JCheckBox();
        controlCounterCheckbox.setText("");
        panel1.add(controlCounterCheckbox, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JToolBar.Separator toolBar$Separator1 = new JToolBar.Separator();
        panel1.add(toolBar$Separator1, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        currentSettingsLabel = new JLabel();
        currentSettingsLabel.setEnabled(true);
        Font currentSettingsLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, currentSettingsLabel.getFont());
        if (currentSettingsLabelFont != null) currentSettingsLabel.setFont(currentSettingsLabelFont);
        currentSettingsLabel.setHorizontalAlignment(0);
        currentSettingsLabel.setHorizontalTextPosition(0);
        currentSettingsLabel.setText("");
        panel1.add(currentSettingsLabel, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        preferenceDetailsLabel = new JLabel();
        preferenceDetailsLabel.setText("");
        panel1.add(preferenceDetailsLabel, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        panel1.add(separator1, new GridConstraints(0, 4, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator2 = new JSeparator();
        panel1.add(separator2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator3 = new JSeparator();
        panel1.add(separator3, new GridConstraints(4, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator4 = new JSeparator();
        panel1.add(separator4, new GridConstraints(0, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
